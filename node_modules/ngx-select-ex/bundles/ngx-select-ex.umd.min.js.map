{
  "version": 3,
  "file": "ngx-select-ex.umd.min.js",
  "sources": [
    "ng://ngx-select-ex/out/ngx-select/ngx-select.classes.ts",
    "ng://ngx-select-ex/out/ngx-select/ngx-templates.directive.ts",
    "ng://ngx-select-ex/out/ngx-select/ngx-select.component.ts"
  ],
  "sourcesContent": [
    "import {DomSanitizer, SafeHtml} from '@angular/platform-browser';\nimport * as escapeStringNs from 'escape-string-regexp';\nimport {INgxSelectOptGroup, INgxSelectOption, INgxSelectOptionBase, TNgxSelectOptionType} from './ngx-select.interfaces';\n\nconst escapeString = escapeStringNs;\n\nexport class NgxSelectOption implements INgxSelectOption, INgxSelectOptionBase {\n    readonly type: TNgxSelectOptionType = 'option';\n\n    constructor(public value: number | string,\n                public text: string,\n                public disabled: boolean,\n                public data: any,\n                private _parent: NgxSelectOptGroup = null) {\n    }\n\n    public get parent(): NgxSelectOptGroup {\n        return this._parent;\n    }\n\n    private cacheHighlightText: string;\n    private cacheRenderedText: SafeHtml = null;\n\n    public renderText(sanitizer: DomSanitizer, highlightText: string): SafeHtml {\n        if (this.cacheHighlightText !== highlightText || this.cacheRenderedText === null) {\n            this.cacheHighlightText = highlightText;\n            if (this.cacheHighlightText) {\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml(this.text.replace(\n                    new RegExp(escapeString(this.cacheHighlightText), 'gi'), '<strong>$&</strong>'\n                ));\n            } else {\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml(this.text);\n            }\n        }\n        return this.cacheRenderedText;\n    }\n}\n\nexport class NgxSelectOptGroup implements INgxSelectOptGroup, INgxSelectOptionBase {\n    readonly type: TNgxSelectOptionType = 'optgroup';\n\n    public optionsFiltered: NgxSelectOption[];\n\n    constructor(public label: string,\n                public options: NgxSelectOption[] = []) {\n        this.filter(() => true);\n    }\n\n    public filter(callbackFn: (value: NgxSelectOption) => any): void {\n        this.optionsFiltered = this.options.filter((option: NgxSelectOption) => callbackFn(option));\n    }\n}\n\nexport type TSelectOption = NgxSelectOptGroup | NgxSelectOption;\n",
    "import {Directive, TemplateRef} from '@angular/core';\n\n@Directive({selector: '[ngx-select-option]'})\nexport class NgxSelectOptionDirective {\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n\n@Directive({selector: '[ngx-select-option-selected]'})\nexport class NgxSelectOptionSelectedDirective {\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n\n@Directive({selector: '[ngx-select-option-not-found]'})\nexport class NgxSelectOptionNotFoundDirective {\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n",
    "import {\n    AfterContentChecked, DoCheck, Input, Output, ViewChild,\n    Component, ElementRef, EventEmitter, forwardRef, HostListener, IterableDiffer, IterableDiffers, ChangeDetectorRef, ContentChild,\n    TemplateRef\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/combineLatest';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/toArray';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/share';\nimport 'rxjs/add/operator/merge';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/do';\nimport * as lodashNs from 'lodash';\nimport * as escapeStringNs from 'escape-string-regexp';\nimport {NgxSelectOptGroup, NgxSelectOption, TSelectOption} from './ngx-select.classes';\nimport {NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective} from './ngx-templates.directive';\nimport {INgxOptionNavigated} from './ngx-select.interfaces';\n\nconst _ = lodashNs;\nconst escapeString = escapeStringNs;\n\nexport interface INgxSelectComponentMouseEvent extends MouseEvent {\n    clickedSelectComponent?: NgxSelectComponent;\n}\n\nenum ENavigation {\n    first, previous, next, last\n}\n\nfunction propertyExists(obj: Object, propertyName: string) {\n    return propertyName in obj;\n}\n\n@Component({\n    selector: 'ngx-select',\n    template: `<div #main [tabindex]=\"disabled? -1: 0\" class=\"ngx-select ui-select-container dropdown\"\n     [ngClass]=\"{\n        'ngx-select_multiple ui-select-multiple form-control': multiple === true,\n        'open show': optionsOpened && optionsFiltered.length\n     }\"\n     (click)=\"mainClicked($event)\" (focusin)=\"mainClicked($event)\"\n     (focus)=\"focusToInput()\" (keydown)=\"inputKeyDown($event)\"\n     (keyup)=\"mainKeyUp($event)\">\n    <div [ngClass]=\"{ 'ngx-select__disabled ui-disabled': disabled}\"></div>\n\n    <!-- single selected item -->\n    <div class=\"ngx-select__selected ui-select-match\"\n         *ngIf=\"(multiple === false) && (!optionsOpened || noAutoComplete)\">\n        <div class=\"ngx-select__toggle btn form-control ui-select-toggle\"\n             (click)=\"optionsOpen()\">\n\n            <span *ngIf=\"!optionsSelected.length\" class=\"ngx-select__placeholder ui-select-placeholder text-muted\"\n                  [innerHtml]=\"placeholder\"></span>\n            <span *ngIf=\"optionsSelected.length\"\n                  class=\"ngx-select__selected-single ui-select-match-text pull-left float-left\"\n                  [ngClass]=\"{'ngx-select__allow-clear ui-select-allow-clear': allowClear}\">\n                <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: optionsSelected[0], index: 0,\n                                                          text: sanitize(optionsSelected[0].text)}\">\n                </ng-container>\n            </span>\n            <i class=\"dropdown-toggle pull-right float-right\"></i>\n            <i class=\"ngx-select__toggle-caret caret pull-right float-right\"></i>\n            <a class=\"ngx-select__clear btn btn-sm btn-link pull-right float-right\" *ngIf=\"canClearNotMultiple()\"\n               (click)=\"optionRemove(optionsSelected[0], $event)\">\n                <i class=\"ngx-select__clear-icon\"></i>\n            </a>\n        </div>\n    </div>\n\n    <!-- multiple selected items -->\n    <div class=\"ngx-select__selected ui-select-match\" *ngIf=\"multiple === true\">\n        <span *ngFor=\"let option of optionsSelected; let idx = index\">\n            <span type=\"button\" tabindex=\"-1\"\n                  class=\"ngx-select__selected-plural btn btn-default btn-secondary btn-xs ui-select-match-item\">\n\n                <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: option, index: idx, text: sanitize(option.text)}\">\n                </ng-container>\n\n                <a class=\"ngx-select__clear btn btn-sm btn-link pull-right float-right\"\n                   (click)=\"optionRemove(option, $event)\">\n                    <i class=\"ngx-select__clear-icon\"></i>\n                </a>\n            </span>\n        </span>\n    </div>\n\n    <!-- live search an item from the list -->\n    <input #input type=\"text\" class=\"ngx-select__search form-control ui-select-search\"\n           *ngIf=\"checkInputVisibility()\"\n           [tabindex]=\"multiple === false? -1: 0\"\n           (keydown)=\"inputKeyDown($event)\"\n           (keyup)=\"inputKeyUp($event, input.value)\"\n           [disabled]=\"disabled\"\n           [placeholder]=\"optionsSelected.length? '': placeholder\"\n           (click)=\"inputClick(input.value)\"\n           autocomplete=\"false\"\n           autocorrect=\"off\"\n           autocapitalize=\"off\"\n           spellcheck=\"false\"\n           role=\"combobox\">\n\n    <!-- options template -->\n    <ul #choiceMenu role=\"menu\" class=\"ngx-select__choices ui-select-choices dropdown-menu\"\n        [class.show]=\"optionsOpened && subjOptions.value.length\">\n        <li class=\"ngx-select__item-group\" role=\"menuitem\"\n            *ngFor=\"let opt of optionsFiltered; trackBy: trackByOption; let idxGroup=index\">\n            <div class=\"divider dropdown-divider\" *ngIf=\"opt.type === 'optgroup' && (idxGroup > 0)\"></div>\n            <div class=\"dropdown-header\" *ngIf=\"opt.type === 'optgroup'\">{{opt.label}}</div>\n\n            <a href=\"#\" #choiceItem class=\"ngx-select__item ui-select-choices-row dropdown-item\"\n               *ngFor=\"let option of (opt.optionsFiltered || [opt]); trackBy: trackByOption; let idxOption = index\"\n               [ngClass]=\"{\n                    'ngx-select__item_active active': isOptionActive(option, choiceItem),\n                    'ngx-select__item_disabled disabled': option.disabled\n               }\"\n               (mouseenter)=\"optionActivate({\n                    activeOption: option,\n                    filteredOptionList: optionsFiltered,\n                    index: optionsFiltered.indexOf(option)\n               })\"\n               (click)=\"optionSelect(option, $event)\">\n                <ng-container [ngTemplateOutlet]=\"templateOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: option, text: highlightOption(option),\n                              index: idxGroup, subIndex: idxOption}\"></ng-container>\n            </a>\n        </li>\n        <li class=\"ngx-select__item ngx-select__item_no-found dropdown-header\" *ngIf=\"!optionsFiltered.length\">\n            <ng-container [ngTemplateOutlet]=\"templateOptionNotFound || defaultTemplateOptionNotFound\"></ng-container>\n        </li>\n    </ul>\n\n    <!--Default templates-->\n    <ng-template #defaultTemplateOption let-text=\"text\">\n        <span [innerHtml]=\"text\"></span>\n    </ng-template>\n\n    <ng-template #defaultTemplateOptionNotFound>\n        No results found\n    </ng-template>\n\n</div>`,\n    styles: [`.ngx-select{ }\n  .ngx-select_multiple{\n    height:auto;\n    padding:3px 3px 0 3px; }\n  .ngx-select_multiple .ngx-select__search{\n    background-color:transparent !important;\n    border:none;\n    outline:none;\n    -webkit-box-shadow:none;\n            box-shadow:none;\n    height:1.6666em;\n    padding:0;\n    margin-bottom:3px; }\n  .ngx-select__disabled{\n    background-color:#eceeef;\n    border-radius:4px;\n    position:absolute;\n    width:100%;\n    height:100%;\n    z-index:5;\n    opacity:0.6;\n    top:0;\n    left:0;\n    cursor:not-allowed; }\n  .ngx-select__toggle{\n    outline:0;\n    position:relative;\n    text-align:left !important;\n    color:#333;\n    background-color:#fff;\n    border-color:#ccc; }\n    .ngx-select__toggle:hover{\n      color:#333;\n      background-color:#e6e6e6;\n      border-color:#adadad; }\n  .ngx-select__toggle-caret{\n    position:absolute;\n    height:10px;\n    top:50%;\n    right:10px;\n    margin-top:-2px; }\n  .ngx-select__placeholder{\n    float:left;\n    color:inherit !important; }\n  .ngx-select__clear{\n    margin-right:10px;\n    padding:0; }\n  .ngx-select_multiple .ngx-select__clear{\n    line-height:initial;\n    margin-left:5px;\n    margin-right:0;\n    color:#000;\n    opacity:.5; }\n  .ngx-select__clear-icon{\n    display:inline-block;\n    font-size:inherit;\n    cursor:pointer;\n    position:relative;\n    width:1em;\n    height:.75em;\n    padding:0; }\n    .ngx-select__clear-icon:before, .ngx-select__clear-icon:after{\n      content:'';\n      position:absolute;\n      border-top:3px solid;\n      width:100%;\n      top:50%;\n      left:0;\n      margin-top:-1px; }\n    .ngx-select__clear-icon:before{\n      -webkit-transform:rotate(45deg);\n              transform:rotate(45deg); }\n    .ngx-select__clear-icon:after{\n      -webkit-transform:rotate(-45deg);\n              transform:rotate(-45deg); }\n  .ngx-select__choices{\n    width:100%;\n    height:auto;\n    max-height:200px;\n    overflow-x:hidden;\n    margin-top:0;\n    position:absolute; }\n  .ngx-select_multiple .ngx-select__choices{\n    margin-top:1px; }\n  .ngx-select__item{\n    display:block;\n    padding:3px 20px;\n    clear:both;\n    font-weight:400;\n    line-height:1.42857143;\n    white-space:nowrap;\n    cursor:pointer;\n    text-decoration:none; }\n  .ngx-select__item_disabled, .ngx-select__item_no-found{\n    cursor:default; }\n  .ngx-select__item_active{\n    color:#fff;\n    outline:0;\n    background-color:#428bca; }\n  .ngx-select__selected-single, .ngx-select__selected-plural{\n    display:-webkit-inline-box;\n    display:-ms-inline-flexbox;\n    display:inline-flex;\n    -webkit-box-align:center;\n        -ms-flex-align:center;\n            align-items:center; }\n  .ngx-select__selected-plural{\n    outline:0;\n    margin:0 3px 3px 0; }\n.input-group > .dropdown{\n  position:static; }\n`],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => NgxSelectComponent),\n            multi: true\n        }\n    ]\n})\nexport class NgxSelectComponent implements ControlValueAccessor, DoCheck, AfterContentChecked {\n    @Input() public items: any[];\n    @Input() public optionValueField = 'id';\n    @Input() public optionTextField = 'text';\n    @Input() public optGroupLabelField = 'label';\n    @Input() public optGroupOptionsField = 'options';\n    @Input() public multiple = false;\n    @Input() public allowClear = false;\n    @Input() public placeholder = '';\n    @Input() public noAutoComplete = false;\n    @Input() public disabled = false;\n    @Input() public defaultValue: any[] = [];\n    @Input() public autoSelectSingleOption = false;\n\n    @Output() public typed = new EventEmitter<string>();\n    @Output() public focus = new EventEmitter<void>();\n    @Output() public blur = new EventEmitter<void>();\n    @Output() public open = new EventEmitter<void>();\n    @Output() public close = new EventEmitter<void>();\n    @Output() public select = new EventEmitter<any>();\n    @Output() public remove = new EventEmitter<any>();\n    @Output() public navigated = new EventEmitter<INgxOptionNavigated>();\n\n    @ViewChild('main') protected mainElRef: ElementRef;\n    @ViewChild('input') protected inputElRef: ElementRef;\n    @ViewChild('choiceMenu') protected choiceMenuElRef: ElementRef;\n\n    @ContentChild(NgxSelectOptionDirective, {read: TemplateRef}) templateOption: NgxSelectOptionDirective;\n    @ContentChild(NgxSelectOptionSelectedDirective, {read: TemplateRef}) templateSelectedOption: NgxSelectOptionSelectedDirective;\n    @ContentChild(NgxSelectOptionNotFoundDirective, {read: TemplateRef}) templateOptionNotFound: NgxSelectOptionNotFoundDirective;\n\n    public optionsOpened = false;\n    public optionsFiltered: TSelectOption[];\n\n    private optionActive: NgxSelectOption;\n    private itemsDiffer: IterableDiffer<any>;\n    private defaultValueDiffer: IterableDiffer<any[]>;\n    private actualValue: any[] = [];\n\n    public subjOptions = new BehaviorSubject<TSelectOption[]>([]);\n    private subjSearchText = new BehaviorSubject<string>('');\n\n    private subjOptionsSelected = new BehaviorSubject<NgxSelectOption[]>([]);\n    private subjExternalValue = new BehaviorSubject<any[]>([]);\n    private subjDefaultValue = new BehaviorSubject<any[]>([]);\n    private subjRegisterOnChange = new Subject();\n\n    private cacheOptionsFilteredFlat: NgxSelectOption[];\n    private cacheElementOffsetTop: number;\n\n    private _focusToInput = false;\n    private isFocused = false;\n\n    constructor(iterableDiffers: IterableDiffers, private sanitizer: DomSanitizer, private cd: ChangeDetectorRef) {\n        // differs\n        this.itemsDiffer = iterableDiffers.find([]).create<any>(null);\n        this.defaultValueDiffer = iterableDiffers.find([]).create<any>(null);\n\n        // observers\n        this.typed.subscribe((text: string) => this.subjSearchText.next(text));\n        let cacheExternalValue: any[];\n        const subjActualValue = this.subjExternalValue\n            .map((v: any[]) => cacheExternalValue = v === null ? [] : [].concat(v))\n            .merge(this.subjOptionsSelected.map((options: NgxSelectOption[]) =>\n                options.map((o: NgxSelectOption) => o.value)\n            ))\n            .combineLatest(this.subjDefaultValue, (eVal: any[], dVal: any[]) => {\n                const newVal = _.isEqual(eVal, dVal) ? [] : eVal;\n                return newVal.length ? newVal : dVal;\n            })\n            .distinctUntilChanged((x, y) => _.isEqual(x, y))\n            .share();\n\n        subjActualValue\n            .combineLatest(this.subjRegisterOnChange, (actualValue: any[]) => actualValue)\n            .subscribe((actualValue: any[]) => {\n                this.actualValue = actualValue;\n                if (!_.isEqual(actualValue, cacheExternalValue)) {\n                    cacheExternalValue = actualValue;\n                    if (this.multiple) {\n                        this.onChange(actualValue);\n                    } else {\n                        this.onChange(actualValue.length ? actualValue[0] : null);\n                    }\n                }\n            });\n\n        this.subjOptions\n            .flatMap((options: TSelectOption[]) => Observable\n                .from(options)\n                .flatMap((option: TSelectOption) => option instanceof NgxSelectOption\n                    ? Observable.of(option)\n                    : (option instanceof NgxSelectOptGroup ? Observable.from(option.options) : Observable.empty())\n                )\n                .toArray()\n            )\n            .combineLatest(subjActualValue, (optionsFlat: NgxSelectOption[], actualValue: any[]) => {\n                Observable.from(optionsFlat)\n                    .filter((option: NgxSelectOption) => actualValue.indexOf(option.value) !== -1)\n                    .toArray()\n                    .filter((options: NgxSelectOption[]) => !_.isEqual(options, this.subjOptionsSelected.value))\n                    .subscribe((options: NgxSelectOption[]) => this.subjOptionsSelected.next(options));\n            })\n            .subscribe();\n\n        this.subjOptions\n            .combineLatest(this.subjOptionsSelected, this.subjSearchText,\n                (options: TSelectOption[], selectedOptions: NgxSelectOption[], search: string) => {\n                    this.optionsFiltered = this.filterOptions(search, options, selectedOptions);\n                    this.cacheOptionsFilteredFlat = null;\n\n                    this.optionsFilteredFlat()\n                        .filter((flatOptions: NgxSelectOption[]) =>\n                            this.autoSelectSingleOption && flatOptions.length === 1 && !selectedOptions.length\n                        )\n                        .subscribe((flatOptions: NgxSelectOption[]) => this.subjOptionsSelected.next(flatOptions));\n                }\n            )\n            .subscribe();\n    }\n\n    public get optionsSelected(): NgxSelectOption[] {\n        return this.subjOptionsSelected.value;\n    }\n\n    public mainClicked(event: INgxSelectComponentMouseEvent) {\n        event.clickedSelectComponent = this;\n        if (!this.isFocused) {\n            this.isFocused = true;\n            this.focus.emit();\n        }\n    }\n\n    @HostListener('document:focusin', ['$event'])\n    @HostListener('document:click', ['$event'])\n    public documentClick(event: INgxSelectComponentMouseEvent) {\n        if (event.clickedSelectComponent !== this) {\n            if (this.optionsOpened) {\n                this.optionsClose();\n                this.cd.detectChanges(); // fix error because of delay between different events\n            }\n            if (this.isFocused) {\n                this.isFocused = false;\n                this.blur.emit();\n            }\n        }\n    }\n\n    private optionsFilteredFlat(): Observable<NgxSelectOption[]> {\n        if (this.cacheOptionsFilteredFlat) {\n            return Observable.of(this.cacheOptionsFilteredFlat);\n        }\n\n        return Observable.from(this.optionsFiltered)\n            .flatMap<TSelectOption, NgxSelectOption>((option: TSelectOption) =>\n                option instanceof NgxSelectOption ? Observable.of(option) :\n                    (option instanceof NgxSelectOptGroup ? Observable.from(option.optionsFiltered) : Observable.empty())\n            )\n            .filter((optionsFilteredFlat: NgxSelectOption) => !optionsFilteredFlat.disabled)\n            .toArray()\n            .do((optionsFilteredFlat: NgxSelectOption[]) => this.cacheOptionsFilteredFlat = optionsFilteredFlat);\n    }\n\n    private navigateOption(navigation: ENavigation) {\n        this.optionsFilteredFlat()\n            .map<NgxSelectOption[], INgxOptionNavigated>((options: NgxSelectOption[]) => {\n                const navigated: INgxOptionNavigated = {index: -1, activeOption: null, filteredOptionList: options};\n                let newActiveIdx;\n                switch (navigation) {\n                    case ENavigation.first:\n                        navigated.index = 0;\n                        break;\n                    case ENavigation.previous:\n                        newActiveIdx = options.indexOf(this.optionActive) - 1;\n                        navigated.index = newActiveIdx >= 0 ? newActiveIdx : options.length - 1;\n                        break;\n                    case ENavigation.next:\n                        newActiveIdx = options.indexOf(this.optionActive) + 1;\n                        navigated.index = newActiveIdx < options.length ? newActiveIdx : 0;\n                        break;\n                    case ENavigation.last:\n                        navigated.index = options.length - 1;\n                        break;\n                }\n                navigated.activeOption = options[navigated.index];\n                return navigated;\n            })\n            .subscribe((newNavigated: INgxOptionNavigated) => this.optionActivate(newNavigated));\n    }\n\n    public ngDoCheck(): void {\n        if (this.itemsDiffer.diff(this.items)) {\n            this.subjOptions.next(this.buildOptions(this.items));\n        }\n\n        const defVal = this.defaultValue ? [].concat(this.defaultValue) : [];\n        if (this.defaultValueDiffer.diff(defVal)) {\n            this.subjDefaultValue.next(defVal);\n        }\n    }\n\n    public ngAfterContentChecked(): void {\n        if (this._focusToInput && this.checkInputVisibility() && this.inputElRef &&\n            this.inputElRef.nativeElement !== document.activeElement) {\n            this._focusToInput = false;\n            this.inputElRef.nativeElement.focus();\n        }\n    }\n\n    public canClearNotMultiple(): boolean {\n        return this.allowClear && !!this.subjOptionsSelected.value.length &&\n            (!this.subjDefaultValue.value.length || this.subjDefaultValue.value[0] !== this.actualValue[0]);\n    }\n\n    public focusToInput(): void {\n        this._focusToInput = true;\n    }\n\n    public inputKeyDown(event: KeyboardEvent) {\n        if (event.keyCode === 13 /*key enter*/) {\n            event.preventDefault();\n            event.stopPropagation();\n            if (this.optionsOpened) {\n                this.optionSelect(this.optionActive);\n                this.navigateOption(ENavigation.next);\n            } else {\n                this.optionsOpen();\n            }\n        } else if (this.optionsOpened && [37, 38, 39, 40].indexOf(event.keyCode) !== -1) {\n            event.preventDefault();\n            event.stopPropagation();\n            switch (event.keyCode) {\n                case 37: // key arrow_left\n                    this.navigateOption(ENavigation.first);\n                    break;\n                case 38: // key arrow_up\n                    this.navigateOption(ENavigation.previous);\n                    break;\n                case 39: // key arrow_right\n                    this.navigateOption(ENavigation.last);\n                    break;\n                case 40: // key arrow_down\n                    this.navigateOption(ENavigation.next);\n                    break;\n            }\n        } else if (!this.optionsOpened && event.keyCode === 46 /*key delete*/) {\n            this.optionRemove(this.subjOptionsSelected.value[this.subjOptionsSelected.value.length - 1], event);\n        }\n    }\n\n    public mainKeyUp(event: KeyboardEvent): void {\n        if (event.keyCode === 27 /* key escape */) {\n            this.optionsClose(true);\n        }\n    }\n\n    public trackByOption(index: number, option: TSelectOption) {\n        return option instanceof NgxSelectOption ? option.value :\n            (option instanceof NgxSelectOptGroup ? option.label : option);\n    }\n\n    public checkInputVisibility(): boolean {\n        return (this.multiple === true) || (this.optionsOpened && !this.noAutoComplete);\n    }\n\n    protected inputKeyUp(event: KeyboardEvent, value: string = '') {\n        if (this.optionsOpened) {\n            if (event.key && (event.key.length === 1 || event.key === 'Backspace')) {\n                this.typed.emit(value);\n            }\n        } else if (value) {\n            this.optionsOpen(value);\n        }\n    }\n\n    protected inputClick(value: string = '') {\n        if (!this.optionsOpened) {\n            this.optionsOpen(value);\n        }\n    }\n\n    protected sanitize(html: string): SafeHtml {\n        return html ? this.sanitizer.bypassSecurityTrustHtml(html) : null;\n    }\n\n    protected highlightOption(option: NgxSelectOption): SafeHtml {\n        if (this.inputElRef) {\n            return option.renderText(this.sanitizer, this.inputElRef.nativeElement.value);\n        }\n        return option.renderText(this.sanitizer, '');\n    }\n\n    protected optionSelect(option: NgxSelectOption, event: Event = null): void {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        if (option && !option.disabled) {\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).concat([option]));\n            this.select.emit(option.value);\n            this.optionsClose(true);\n            this.onTouched();\n        }\n    }\n\n    protected optionRemove(option: NgxSelectOption, event: Event): void {\n        if (!this.disabled) {\n            event.stopPropagation();\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).filter(o => o !== option));\n            this.remove.emit(option.value);\n        }\n    }\n\n    protected isOptionActive(option: NgxSelectOption, element: HTMLElement) {\n        if (this.optionActive === option) {\n            this.ensureVisibleElement(element);\n            return true;\n        }\n        return false;\n    }\n\n    protected optionActivate(navigated: INgxOptionNavigated): void {\n        if (!navigated.activeOption || !navigated.activeOption.disabled) {\n            this.optionActive = navigated.activeOption;\n            this.navigated.emit(navigated);\n        }\n    }\n\n    private filterOptions(search: string, options: TSelectOption[], selectedOptions: NgxSelectOption[]): TSelectOption[] {\n        const regExp = new RegExp(escapeString(search), 'i'),\n            filterOption = (option: NgxSelectOption) => {\n                return (!search || regExp.test(option.text)) && (!this.multiple || selectedOptions.indexOf(option) === -1);\n            };\n\n        return options.filter((option: TSelectOption) => {\n            if (option instanceof NgxSelectOption) {\n                return filterOption(<NgxSelectOption>option);\n            } else if (option instanceof NgxSelectOptGroup) {\n                const subOp = <NgxSelectOptGroup>option;\n                subOp.filter((subOption: NgxSelectOption) => filterOption(subOption));\n                return subOp.optionsFiltered.length;\n            }\n        });\n    }\n\n    private ensureVisibleElement(element: HTMLElement) {\n        if (this.choiceMenuElRef && this.cacheElementOffsetTop !== element.offsetTop) {\n            this.cacheElementOffsetTop = element.offsetTop;\n            const container: HTMLElement = this.choiceMenuElRef.nativeElement;\n            if (this.cacheElementOffsetTop < container.scrollTop) {\n                container.scrollTop = this.cacheElementOffsetTop;\n            } else if (this.cacheElementOffsetTop + element.offsetHeight > container.scrollTop + container.clientHeight) {\n                container.scrollTop = this.cacheElementOffsetTop + element.offsetHeight - container.clientHeight;\n            }\n        }\n    }\n\n    private optionsOpen(search: string = '') {\n        if (!this.disabled) {\n            this.optionsOpened = true;\n            this.subjSearchText.next(search);\n            if (!this.multiple && this.subjOptionsSelected.value.length) {\n                this.optionsFilteredFlat().subscribe((options: NgxSelectOption[]) => this.optionActivate({\n                    activeOption: this.subjOptionsSelected.value[0],\n                    filteredOptionList: options,\n                    index: options.indexOf(this.subjOptionsSelected.value[0])\n                }));\n            } else {\n                this.navigateOption(ENavigation.first);\n            }\n            this.focusToInput();\n            this.open.emit();\n        }\n    }\n\n    private optionsClose(focusToHost: boolean = false) {\n        this.optionsOpened = false;\n        if (focusToHost) {\n            const x = window.scrollX, y = window.scrollY;\n            this.mainElRef.nativeElement.focus();\n            window.scrollTo(x, y);\n        }\n        this.close.emit();\n    }\n\n    private buildOptions(data: any[]): Array<NgxSelectOption | NgxSelectOptGroup> {\n        const result: Array<NgxSelectOption | NgxSelectOptGroup> = [];\n        if (Array.isArray(data)) {\n            let option: NgxSelectOption;\n            data.forEach((item: any) => {\n                const isOptGroup = typeof item === 'object' && item !== null &&\n                    propertyExists(item, this.optGroupLabelField) && propertyExists(item, this.optGroupOptionsField) &&\n                    Array.isArray(item[this.optGroupOptionsField]);\n                if (isOptGroup) {\n                    const optGroup = new NgxSelectOptGroup(item[this.optGroupLabelField]);\n                    item[this.optGroupOptionsField].forEach((subOption: NgxSelectOption) => {\n                        if (option = this.buildOption(subOption, optGroup)) {\n                            optGroup.options.push(option);\n                        }\n                    });\n                    result.push(optGroup);\n                } else if (option = this.buildOption(item, null)) {\n                    result.push(option);\n                }\n            });\n        }\n        return result;\n    }\n\n    private buildOption(data: any, parent: NgxSelectOptGroup): NgxSelectOption {\n        let value, text, disabled;\n        if (typeof data === 'string' || typeof data === 'number') {\n            value = text = data;\n            disabled = false;\n        } else if (typeof data === 'object' && data !== null &&\n            (propertyExists(data, this.optionValueField) || propertyExists(data, this.optionTextField))) {\n            value = propertyExists(data, this.optionValueField) ? data[this.optionValueField] : data[this.optionTextField];\n            text = propertyExists(data, this.optionTextField) ? data[this.optionTextField] : data[this.optionValueField];\n            disabled = propertyExists(data, 'disabled') ? data['disabled'] : false;\n        } else {\n            return null;\n        }\n        return new NgxSelectOption(value, text, disabled, data, parent);\n    }\n\n    //////////// interface ControlValueAccessor ////////////\n    public onChange = (v: any) => v;\n\n    public onTouched: () => void = () => null;\n\n    public writeValue(obj: any): void {\n        this.subjExternalValue.next(obj);\n    }\n\n    public registerOnChange(fn: (_: any) => {}): void {\n        this.onChange = fn;\n        this.subjRegisterOnChange.next();\n    }\n\n    public registerOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n"
  ],
  "names": [
    "NgxSelectOption",
    "_parent",
    "this",
    "value",
    "text",
    "disabled",
    "data",
    "type",
    "cacheRenderedText",
    "get",
    "prototype",
    "renderText",
    "sanitizer",
    "highlightText",
    "cacheHighlightText",
    "bypassSecurityTrustHtml",
    "replace",
    "RegExp",
    "escapeString",
    "NgxSelectOptGroup",
    "label",
    "options",
    "filter",
    "NgxSelectOptionDirective",
    "decorators",
    "ctorParameters",
    "TemplateRef",
    "NgxSelectOptionSelectedDirective",
    "template",
    "NgxSelectOptionNotFoundDirective",
    "ENavigation",
    "next",
    "last",
    "NgxSelectComponent",
    "iterableDiffers",
    "cd",
    "cacheExternalValue",
    "_this",
    "optionValueField",
    "optionTextField",
    "optGroupLabelField",
    "optGroupOptionsField",
    "multiple",
    "allowClear",
    "placeholder",
    "noAutoComplete",
    "defaultValue",
    "autoSelectSingleOption",
    "typed",
    "EventEmitter",
    "focus",
    "blur",
    "open",
    "close",
    "select",
    "remove",
    "navigated",
    "optionsOpened",
    "actualValue",
    "subjOptions",
    "BehaviorSubject",
    "subjSearchText",
    "subjExternalValue",
    "subjDefaultValue",
    "_focusToInput",
    "isFocused",
    "onChange",
    "v",
    "onTouched",
    "itemsDiffer",
    "find",
    "create",
    "defaultValueDiffer",
    "subscribe",
    "subjActualValue",
    "map",
    "concat",
    "merge",
    "subjOptionsSelected",
    "o",
    "combineLatest",
    "eVal",
    "dVal",
    "newVal",
    "_",
    "isEqual",
    "length",
    "distinctUntilChanged",
    "x",
    "y",
    "share",
    "subjRegisterOnChange",
    "flatMap",
    "Observable",
    "from",
    "option",
    "of",
    "empty",
    "toArray",
    "optionsFlat",
    "indexOf",
    "selectedOptions",
    "search",
    "flatOptions",
    "enumerable",
    "mainClicked",
    "event",
    "clickedSelectComponent",
    "emit",
    "optionsClose",
    "detectChanges",
    "cacheOptionsFilteredFlat",
    "optionsFiltered",
    "optionsFilteredFlat",
    "do",
    "navigateOption",
    "navigation",
    "newActiveIdx",
    "index",
    "activeOption",
    "filteredOptionList",
    "first",
    "previous",
    "optionActive",
    "ngDoCheck",
    "diff",
    "items",
    "buildOptions",
    "inputElRef",
    "nativeElement",
    "canClearNotMultiple",
    "focusToInput",
    "inputKeyDown",
    "keyCode",
    "preventDefault",
    "optionSelect",
    "optionsOpen",
    "stopPropagation",
    "checkInputVisibility",
    "inputKeyUp",
    "key",
    "highlightOption",
    "optionRemove",
    "optionActivate",
    "regExp",
    "test",
    "filterOption",
    "subOp",
    "subOption",
    "ensureVisibleElement",
    "element",
    "choiceMenuElRef",
    "cacheElementOffsetTop",
    "offsetTop",
    "container",
    "scrollTop",
    "offsetHeight",
    "clientHeight",
    "focusToHost",
    "window",
    "scrollX",
    "scrollY",
    "mainElRef",
    "scrollTo",
    "result",
    "optGroup_1",
    "item",
    "forEach",
    "option_1",
    "buildOption",
    "push",
    "parent",
    "propertyExists",
    "obj",
    "registerOnChange",
    "fn"
  ],
  "mappings": "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"
}
